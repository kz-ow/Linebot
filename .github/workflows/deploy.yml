name: Deploy via SSM

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write    # OIDC トークン取得を許可
      contents: read     # actions/checkout のため

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Send command via SSM
        uses: MercuryTechnologies/aws-ssm-send-command-action@main
        with:
          document-name: AWS-RunShellScript
          targets: '[{"Key":"InstanceIds","Values":["${{ secrets.EC2_INSTANCE_ID }}"]}]'
          parameters: >-
           { "workingDirectory":[" ${{ secrets.AWS_WORKING_DIR }} "],
             "commands":[
               "eval $(ssh-agent -s)",
               "echo '${{ secrets.SSH_PRIVATE_KEY }}' | tr -d '\r' | ssh-add -",
               "if [ ! -d Linebot/.git ]; then git clone git@github.com:kz-ow/Linebot.git; fi",
               "cd Linebot",
               "git reset --hard origin/main",
               "git clean -fd",
               "git pull origin main",
               "echo 'POSTGRES_USER=***'>  .env" ,
               "echo 'POSTGRES_PASSWORD=***'  >> .env",
               "echo 'POSTGRES_DB=***'        >> .env",
               "echo 'AWS_REGION=***'         >> .env",
               "echo 'AWS_SECRET_NAME=***'    >> .env",,
               "chmod 600 .env",
               "if [ -z \"$(docker ps -aq)\" ]; then docker compose up -d; else docker compose up -d --build; fi",
               "rm -f .env"
            ]
           }
          wait-until-command-executed: true    
          max-wait-time: 600                  
          log-failed-command-invocations: true  
