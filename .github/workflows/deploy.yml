name: Deploy via SSM

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write    # OIDC トークン取得を許可
      contents: read     # actions/checkout のため

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Send command via SSM
        uses: MercuryTechnologies/aws-ssm-send-command-action@main
        with:
          document-name: AWS-RunShellScript
          targets: '[{"Key":"InstanceIds","Values":["${{ secrets.EC2_INSTANCE_ID }}"]}]'
          parameters: >-
           { "workingDirectory":[" ${{ secrets.AWS_WORKING_DIR }} "],
             "commands":[
               "eval $(ssh-agent -s)",
               "ssh-add ${{ secrets.SSH_PRIVATE_KEY }}",
               "if [ ! -d .git]; then git clone git@github.com:kz-ow/Linebot.git && cd Linebot; fi"
               "git reset --hard origin/main",
               "git clean -fd",
               "git pull origin main",
               "cat > .env <<EOF\nPOSTGRES_USER=${{ secrets.POSTGRES_USER }}\nPOSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}\nPOSTGRES_DB=${{ secrets.POSTGRES_DB }}\nAWS_REGION=${{ secrets.AWS_REGION }}\nAWS_SECRET_NAME=${{ secrets.AWS_SECRET_NAME }}\nEOF\n",
               "chmod 600 .env",
               "if [ -z \"$(docker ps -aq)\" ]; then docker compose up -d; else docker compose up -d --build; fi",
               "rm -f .env"
            ]
           }
          wait-until-command-executed: true    
          max-wait-time: 600                  
          log-failed-command-invocations: true  
